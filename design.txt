3Dのままで情報を渡してoptさせることを目的としたdqn。
kerasのconvolution3Dを使ってconvする。
データは幾つかの目を用いる。それぞれ64x64x64くらいを想定。→まずは32とか16で実験しよう
原子の近くの点はガウス的に値を濃くして原子を表現。また、周期、族に応じて濃くなっていくように
して二枚の層で一つの原子を表現。
三枚目の層は拡大して見ている領域と現在選択している原子の表示を行う。この３枚で一つのレイヤーとする。
三枚目のレイヤーは目の外側の色で多重度を決定。

さらに三つくらいまで拡大させたものを用意して一緒に読ませる。
なので、合計9こくらいを同時に読ませる。目は3つを想定。

命令の種類は手の移動(6種類)、手による引力の発生（引っ張り）(1種類)
目の移動（6*2=12種類)、目をこらす（2*2=4種類)、多重度の上下(2種類)
の合計23種類。手の移動は一番拡大したレイヤーで一目盛ずつを想定。原子の引っ張りもまたしかり。
ダメそうなら変えよう。

引力の発生を行った時は量子化学計算を行ってエネルギーを再算出する。

12345
1234
123
12
1

n
5 2 6 10 14 18
4 2 6 10 14  0
3 2 6 10  0  0
2 2 6  0  0  0
1 2 0  0  0  0
  1 2  3  4  5 l

n_d = 2 * (l * 2 - 1)

11 21 22 21


キューブクラスの役割
原点、サイズ、分割数を保持。
__getitem__で座標を得られる

基本的に三次元の要素は一時限で作ってからreshapeする。

DQNパート。
モデルは関数で作成。
lossは作成済み
これらを使ってモデルをコンパイルするのは容易い。
predictを使えばQ値が帰ってくるので、得られたQ値リストからアクションを決定する関数を作る

stateはmol.fieldで作り、actionは上記の関数で作成。得られた結果からnext_stateをgameで作り、
rewardをgameが作る。
gameはシグナルを受けて行動してrewardとnext_stateを返すオブジェクト。



atomsにto_xyzを追加
